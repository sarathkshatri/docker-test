var e=Object.defineProperty,t=(t,i,s)=>("symbol"!=typeof i&&(i+=""),i in t?e(t,i,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[i]=s);import{f as i,V as s,l as n,C as o,a,b as r}from"./vendor.b2bdda64.js";!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(i){const s=new URL(e,location),n=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((i,o)=>{const a=new URL(e,s);if(self[t].moduleMap[a])return i(self[t].moduleMap[a]);const r=new Blob([`import * as m from '${a}';`,`${t}.moduleMap['${a}']=m;`],{type:"text/javascript"}),c=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(r),onerror(){o(new Error(`Failed to import: ${e}`)),n(c)},onload(){i(self[t].moduleMap[a]),n(c)}});document.head.appendChild(c)})),self[t].moduleMap={}}}("/assets/");class c extends class{constructor(e){t(this,"location"),this.location=e}getLocation(){return this.location}setLocation(e){this.location=e}}{constructor(e,i,s){super(e),t(this,"personLivingState","ALIVE"),t(this,"arrivalTick"),t(this,"idx"),t(this,"destination"),t(this,"removeFromSimulationFlage",!1),t(this,"UUID"),t(this,"assignedRoom"),t(this,"moving",!0),t(this,"queue",[]),this.UUID=i,this.arrivalTick=s}get Moving(){return this.moving}set Moving(e){this.moving=e}get UUID(){return this.UUID}set UUID(e){this.UUID=e}get RemoveFromSimulationFlag(){return this.removeFromSimulationFlage}set RemoveFromSimulationFlage(e){this.removeFromSimulationFlage=e}getDestination(){return this.destination}setDestination(e){this.destination=e}get Idx(){return this.idx}set Idx(e){this.idx=e}get ArrivalTick(){return this.arrivalTick}set ArrivalTick(e){this.arrivalTick=e}get PersonLivingState(){return this.personLivingState}set PersonLivingState(e){this.personLivingState=e}update(){}getAssignedRoom(){return this.assignedRoom}setAssignedRoom(e){this.assignedRoom=e}pop(){return this.queue.remove()}push(e){this.queue.add(e)}}class l extends c{constructor(e,i,s,n,o,a){super(e,i,a),t(this,"medicalStaffType"),t(this,"medicalStaffSubclass"),t(this,"doctorYear"),t(this,"currentPatient"),t(this,"myRooms"),t(this,"responsibility"),t(this,"computer"),this.medicalStaffType=s,this.medicalStaffSubclass=n,this.doctorYear=null==o?"NONE":o,this.myRooms=[]}get Computer(){return this.computer}set Computer(e){this.computer=e}get Responsibility(){return this.responsibility}set Responsibility(e){this.responsibility=e,this.setCurrentPatient(e.entry.patient)}get MyRooms(){return this.myRooms}set MyRooms(e){this.myRooms=e}addRoom(e){this.myRooms.push(e)}hasRoom(e){return this.MyRooms.some((t=>t.name==e.name))}getCurrentPatient(){return this.currentPatient}setCurrentPatient(e){this.currentPatient=e}get MedicalStaffSubclass(){return this.medicalStaffSubclass}set MedicalStaffSubclass(e){this.medicalStaffSubclass=e}get MedicalStaffType(){return this.medicalStaffType}set MedicalStaffType(e){this.medicalStaffType=e}get DoctorType(){return this.medicalStaffSubclass}set DoctorType(e){this.medicalStaffSubclass=e}get DoctorYear(){return this.doctorYear}set DoctorYear(e){this.doctorYear=e}removeResponsibility(){responsibility=null}}class d{constructor(e,t){this.index=e,this.start=t;const s=new i.BehaviorTreeBuilder;let n=this;this.tree=s.sequence("Go To").do("Set destination goal",(e=>(Hospital.agents.find((e=>e.id==n.index)).destination=new Vector3(n.start.x,n.start.y,n.start.z),i.BehaviorTreeStatus.Success))).do("Traveling to goal",(e=>{let t=Hospital.agents.find((e=>e.id==n.index)),s=e.crowd.find((e=>e.id==n.index));t.destination=new Vector3(n.start.x,n.start.y,n.start.z);let o=e.crowd.find((e=>e.id==n.index)),a=new Vector3(o.location.x,o.location.y,o.location.z),r=Vector3.fromObject(n.start);return Vector3.subtract(a,r).length()<2?(s.pose="Idle",i.BehaviorTreeStatus.Success):i.BehaviorTreeStatus.Running})).end().build()}}class u{constructor(e,t){this.index=e;let s=this;const n=new i.BehaviorTreeBuilder;this.tree=n.sequence("Wait Forever").do("Wait Forever",(e=>{let t=Hospital.agents.find((e=>e.id==s.index)),n=e.crowd.find((e=>e.id==s.index)),o=new Vector3(n.location.x,n.location.y,n.location.z);return t.destination=new Vector3(o.x,o.y,o.z),n.pose="Idle",i.BehaviorTreeStatus.Running})).end().build()}}class h{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;let s=Hospital.locations.find((e=>"B Desk"==e.name));if(!s)throw new Exception("We couldn't find a location called B Desk");this.goTo=new d(this.index,s.location),this.tree=t.sequence("Attending Tree").splice(this.goTo.tree).splice(new u(e).tree).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class p{constructor(e,t){this.index=e,this.room=t;const s=new i.BehaviorTreeBuilder;this.tree=s.sequence("Assign Computer").do("Set Computer Location",(t=>(Hospital.agents.find((t=>t.id==e)).Computer=Vector3.fromObject(this.room),i.BehaviorTreeStatus.Success))).end().build()}}class g{}class T{constructor(e,i,s,n,o,a){t(this,"name"),t(this,"duration"),t(this,"remaining"),t(this,"entry"),t(this,"priority"),t(this,"subject"),t(this,"medicalStaff"),t(this,"calledStarted",!1),t(this,"calledFinished",!1),this.name=e,this.duration=i,this.remaining=i,this.entry=s,this.priority=n,this.subject=o,this.medicalStaff=a}getMedicalStaff(){return this.medicalStaff}setMedicalStaff(e){this.medicalStaff=e}isStarted(){return this.calledStarted}getSubject(){return this.subject}setSubject(e){this.subject=e}getPriority(){return this.priority}setPriority(e){this.priority=e}getRemaining(){return this.remaining}setRemaining(e){this.remaining=e}getName(){return this.name}setName(e){this.name=e}getDuration(){return this.duration}setDuration(e){this.duration=e}getEntry(){return this.entry}setEntry(e){this.entry=e}doWork(e){this.calledStarted||(this.calledStarted=!0,this.start()),this.remaining-=e,this.remaining<=0&&!this.calledFinished&&(this.calledFinished=!0,this.finish())}finish(){this.doFinish&&this.doFinish()}start(){this.doStart&&this.doStart()}isDone(){return this.remaining<=0}}class m{}t(m,"PATIENT","PATIENT"),t(m,"COMPUTER","COMPUTER"),t(m,"ATTENDING","ATTENDING"),t(m,"TRANSPORT","TRANSPORT");class S extends T{constructor(e,t){super("Take Vitals",1,e,5,m.PATIENT,t)}doFinish(){this.getEntry().setVitals("Taken")}}class w{}t(w,"RESIDENT_EKG_READ","ResidentEKGRead"),t(w,"RESIDENT_EKG_CONSULT","ResidentEKGConsult"),t(w,"RESIDENT_EKG_ORDER_CAT","ResidentEKGOrderCAT"),t(w,"RESIDENT_SCAN_READ","ResidentScanRead"),t(w,"RESIDENT_ATTENDING_CONSULT","ResidentAttendingConsult"),t(w,"RESIDENT_PATIENT_CONSULT","ResidentPatientConsult"),t(w,"CT_CAT_DO_SCAN","CTCATDoScan"),t(w,"CT_PICKUP","CTPickup"),t(w,"RADIOLOGY_REVIEW_SCAN","RadiologyReviewScan"),t(w,"NURSE_DISCHARGE_PATIENT","NurseDischargePatient"),t(w,"NURSE_ESCORT_PATIENT_TO_EXIT","NurseEscortPatientToExit");class R extends T{constructor(e,t){super("Tech EKG Do",1,e,4,m.PATIENT,t)}doFinish(){this.getEntry().setEkg("EKG Results"),this.getEntry().addUnacknowledged(w.RESIDENT_EKG_READ)}}class f{}t(f,"WAITING",0),t(f,"FOLLOWING",1),t(f,"GO_INTO_ROOM",2),t(f,"DONE",3);class E extends T{constructor(e,i,s,n){super(e,1,i,4,m.PATIENT,s),t(this,"room"),this.room=n}getRoom(){return this.room}setRoom(e){this.room=e}doWork(e){this.calledStarted||(this.calledStarted=!0,this.start()),Vector3.fromObject(this.entry.getPatient().getLocation()).distanceTo(this.room.getLocation())<1.5&&!this.calledFinished&&(this.calledFinished=!0,this.getMedicalStaff().setCurrentPatient(null),this.entry.getPatient().setPatientTempState(f.GO_INTO_ROOM),this.entry.getPatient().setAssignedRoom(this.room),this.finish(),this.remaining=0)}}class y extends E{constructor(e,t,i){super("Tech EKG Take Patient To",e,t,i)}doFinish(){this.entry.addUnacknowledged(w.CT_CAT_DO_SCAN)}}class C extends E{constructor(e,t){super("Tech CAT Pickup Responsibility",e,t,e.getBed())}doFinish(){this.entry.acknowledge(w.CT_PICKUP)}}class v extends g{get(e,t){return null==e.getVitals()?new S(e,t):null==e.getEkg()?new R(e,t):Hospital.getCTQueue().length>0&&!Hospital.isCTOccupied()&&e.getPatient()==Hospital.getCTQueue()[0]?new y(e,t,Hospital.getLocationByName("CT 1")):e.unacknowledged(w.CT_PICKUP)?new C(e,t):null}}class N extends T{constructor(e,t){super("Get Health Information",1,e,4,m.PATIENT,t)}doFinish(){this.getEntry().setAnsweredQuestions(!0)}}class b extends T{constructor(e,t){super("Nurse Discharge Patient",1,e,4,m.PATIENT,t)}doFinish(){this.entry.acknowledge(w.NURSE_DISCHARGE_PATIENT),this.entry.addUnacknowledged(w.NURSE_ESCORT_PATIENT_TO_EXIT)}}class A extends E{constructor(e,t){super("Nurse Escort Patient To Exit",e,t,Hospital.locations.find((e=>"Main Entrance"==e.name)))}doFinish(){this.entry.acknowledge(w.NURSE_ESCORT_PATIENT_TO_EXIT),this.entry.getPatient().setPatientTempState(f.DONE)}}class P extends g{get(e,t){return e.isAnsweredQuestions()?e.unacknowledged(w.NURSE_DISCHARGE_PATIENT)?new b(e,t):e.unacknowledged(w.NURSE_ESCORT_PATIENT_TO_EXIT)?new A(e,t):null:new N(e,t)}}class B extends T{constructor(e,t){super("Resident EKG Read",1,e,4,m.COMPUTER,t)}doFinish(){this.entry.acknowledge(w.RESIDENT_EKG_READ),this.entry.addUnacknowledged(w.RESIDENT_EKG_CONSULT)}}class O extends T{constructor(e,t){super("Resident EKG Consult",1,e,4,m.PATIENT,t)}doFinish(){this.entry.acknowledge(w.RESIDENT_EKG_CONSULT),this.entry.addUnacknowledged(w.RESIDENT_EKG_ORDER_CAT)}}class I extends T{constructor(e,t){super("Resident EKG Order CAT",1,e,4,m.PATIENT,t)}doFinish(){this.entry.acknowledge(w.RESIDENT_EKG_ORDER_CAT);let e=this.entry.getPatient();Hospital.CTQueue.push(e)}}class _ extends T{constructor(e,t){super("Resident Scan Read",1,e,4,m.COMPUTER,t)}doFinish(){this.entry.acknowledge(w.RESIDENT_SCAN_READ),this.entry.addUnacknowledged(w.RESIDENT_ATTENDING_CONSULT)}}class x extends T{constructor(e,t){super("Resident Attending Consult",1,e,5,m.ATTENDING,t)}doFinish(){this.entry.acknowledge(w.RESIDENT_ATTENDING_CONSULT),this.entry.addUnacknowledged(w.RESIDENT_PATIENT_CONSULT)}}class k extends T{constructor(e,t){super("Resident Consult Patient",1,e,5,m.PATIENT,t)}doFinish(){this.entry.acknowledge(w.RESIDENT_PATIENT_CONSULT),this.entry.addUnacknowledged(w.NURSE_DISCHARGE_PATIENT)}}class H extends g{get(e,t){return e.unacknowledged(w.RESIDENT_EKG_READ)?new B(e,t):e.unacknowledged(w.RESIDENT_EKG_CONSULT)?new O(e,t):e.unacknowledged(w.RESIDENT_EKG_ORDER_CAT)?new I(e,t):e.unacknowledged(w.RESIDENT_SCAN_READ)?new _(e,t):e.unacknowledged(w.RESIDENT_ATTENDING_CONSULT)?new x(e,t):e.unacknowledged(w.RESIDENT_PATIENT_CONSULT)?new k(e,t):null}}class D extends T{constructor(e,t){super("CT CAT Do Scan",1,e,4,m.COMPUTER,t)}doFinish(){this.entry.acknowledge(w.CT_CAT_DO_SCAN),this.entry.addUnacknowledged(w.CT_PICKUP),this.entry.addUnacknowledged(w.RADIOLOGY_REVIEW_SCAN)}}class L extends g{get(e,t){return e.unacknowledged(w.CT_CAT_DO_SCAN)?(Hospital.setCTOccupied(!0),new D(e,t)):null}}class F extends T{constructor(e,t){super("Radiology Review Scan Responsibility",1,e,4,m.COMPUTER,t)}doFinish(){this.entry.acknowledge(w.RADIOLOGY_REVIEW_SCAN),this.entry.addUnacknowledged(w.RESIDENT_SCAN_READ)}}class M extends g{get(e,t){return e.unacknowledged(w.RADIOLOGY_REVIEW_SCAN)?new F(e,t):null}}class U{static get(e){switch(e){case"Tech":return new v;case"Nurse":return new P;case"Resident":return new H;case"CT":return new L;case"Radiology":return new M;default:return null}}}class G{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;let s=()=>Hospital.agents.find((t=>t.id==e));this.tree=t.sequence("Get Computer Responsibility").do("Check Responsibilities",(e=>{let t=this.getResponsibilityFactory(s().MedicalStaffSubclass),n=Hospital.computer.entries.filter((e=>s().hasRoom(e.getBed())&&null!=t.get(e,s())));if(!n||0==n.length)return i.BehaviorTreeStatus.Failure;if(n=n.filter((e=>t.get(e,s()).getSubject()==m.COMPUTER)),!n||0==n.length)return i.BehaviorTreeStatus.Failure;let o=n.map((e=>t.get(e,s()))).reduce(((e,t)=>null==e?null:null==t||e.getPriority()<t.getPriority()?e:t));return null==o?i.BehaviorTreeStatus.Failure:(s().Responsibility=o,i.BehaviorTreeStatus.Success)})).end().build()}getResponsibilityFactory(e){return U.get(e)}}class V{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;let s=()=>Hospital.agents.find((t=>t.id==e));this.tree=t.sequence("Get Responsibility").do("Check Responsibilities",(e=>{let t=this.getResponsibilityFactory(s().MedicalStaffSubclass),n=s();Hospital.computer.entries.map((e=>({entry:e,responsibility:t.get(e,n)}))).filter((e=>null!=e.responsibility&&n.hasRoom(e.entry.getBed())));let o=Hospital.computer.entries.filter((e=>s().hasRoom(e.getBed())&&null!=t.get(e,s())));if(!o||0==o.length)return i.BehaviorTreeStatus.Failure;if(o=o.filter((e=>t.get(e,s()).getSubject!=m.COMPUTER)),!o||0==o.length)return i.BehaviorTreeStatus.Failure;let a=o.map((e=>t.get(e,s()))).reduce(((e,t)=>null==e?null:null==t||e.getPriority()<t.getPriority()?e:t));return null==a?i.BehaviorTreeStatus.Failure:(s().Responsibility=a,i.BehaviorTreeStatus.Success)})).end().build()}getResponsibilityFactory(e){return U.get(e)}}class j{constructor(e,t){this.index=e,this.locationFunction=t;const s=new i.BehaviorTreeBuilder;let n=this;this.tree=s.sequence("Go To Lazy").do("Set destination goal lazy",(e=>{let t=Hospital.agents.find((e=>e.id==n.index)),s=n.locationFunction();return t.destination=Vector3.fromObject(s),i.BehaviorTreeStatus.Success})).do("Traveling to goal lazy",(e=>{let t=Hospital.agents.find((e=>e.id==n.index)),s=e.crowd.find((e=>e.id==n.index)),o=n.locationFunction();t.destination=o;let a=e.crowd.find((e=>e.id==n.index)),r=new Vector3(a.location.x,a.location.y,a.location.z),c=Vector3.fromObject(n.locationFunction());return Vector3.subtract(r,c).length()<2?(s.pose="Idle",i.BehaviorTreeStatus.Success):i.BehaviorTreeStatus.Running})).end().build()}}class q{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.tree=t.sequence("Handle Responsibility").do("Do Work",(t=>{let s=Hospital.agents.find((t=>t.id==e)).Responsibility,n=1/Hospital.getFPS();return s.isStarted(),s.doWork(n),s.isDone()?i.BehaviorTreeStatus.Success:i.BehaviorTreeStatus.Running})).end().build()}}class W{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;let s=()=>Hospital.agents.find((t=>t.id==e));this.tree=t.sequence("Go To Responsibility").do("Go to responsibility",(e=>{let t,n=s().Responsibility;if(s().Responsibility.getSubject()==m.COMPUTER){t=s().computer.location}else t=s().Responsibility.getSubject()==m.ATTENDING?Hospital.agents.find((e=>"Attending"==e.name)).location:"Tech"==s().name?n.entry.patient.getAssignedRoom().location:n.entry.patient.getPermanentRoom().location;return s().setDestination(Vector3.fromObject(t)),Vector3.fromObject(s().location).distanceTo(t)<2?i.BehaviorTreeStatus.Success:i.BehaviorTreeStatus.Running})).end().build()}}class K{constructor(e){this.index=e;let t=()=>Hospital.agents.find((t=>t.id==e));const s=new i.BehaviorTreeBuilder;this.tree=s.sequence("Setup Transport").do("Setup Transport",(e=>{let s=t().getCurrentPatient(),n=t().Responsibility;if(!(n instanceof E))return i.BehaviorTreeStatus.Success;let o=n;return t().setDestination(o.getRoom().getLocation()),s.setInstructor(t()),s.setPatientTempState(f.FOLLOWING),i.BehaviorTreeStatus.Success})).end().build()}}class Y{constructor(e){this.index=e;let t=()=>Hospital.agents.find((t=>t.id==e));const s=new i.BehaviorTreeBuilder;this.tree=s.sequence("Reasses").do("Reassess",(e=>{let s=t().getCurrentPatient();if(!s)return i.BehaviorTreeStatus.Failure;if(Vector3.fromObject(s.location).distanceTo(t().location)>2)return i.BehaviorTreeStatus.Failure;let n,o=Hospital.computer.getEntry(s);if(null!=o){n=U.get(t().MedicalStaffSubclass).get(o,t())}return null==o||null==n?(t().setCurrentPatient(null),i.BehaviorTreeStatus.Failure):(t().setCurrentPatient(s),t().Responsibility=n,i.BehaviorTreeStatus.Success)})).end().build()}}class X{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let n=()=>Hospital.agents.find((t=>t.id==e));new j(this.index,(()=>n().Computer.location)).tree,new G(e).tree,new V(e).tree;let o=new W(e).tree,a=new K(e).tree,r=new q(e).tree;new Y(e).tree,this.tree=t.inverter().untilFail().do("Go to Responsibility",(async function(e){return await o.tick(e)})).do("Wait For Responsibility Person",(e=>{let t;if(n().Responsibility.getSubject()==m.COMPUTER)return i.BehaviorTreeStatus.Success;if(n().Responsibility.getSubject()==m.ATTENDING)t=Hospital.agents.find((e=>"Attending"==e.name)).location;else{let e=n().getCurrentPatient();t=s.fromObject(e.getLocation())}return s.fromObject(n().getLocation()).distanceTo(t)<2?i.BehaviorTreeStatus.Success:i.BehaviorTreeStatus.Running})).do("Set Up Transport",(async e=>await a.tick(e))).do("Handle Responsibility",(async e=>await r.tick(e))).do("Force Fail",(async e=>i.BehaviorTreeStatus.Failure)).end().end().build()}}class z{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s=new j(this.index,(()=>Hospital.agents.find((t=>t.id==e)).Computer.location)).tree;new G(e).tree;let n=new V(e).tree;new W(e).tree,new K(e).tree,new q(e).tree;let o=new Y(e).tree,a=new X(e).tree;this.tree=t.repeat("Main Repeat").inverter("After Computer Inverter").untilFail("After Computer Until Fail").do("Go to my computer",(async function(e){return await s.tick(e)})).do("Get Responsibility",(async function(e){return await n.tick(e)})).do("First Sub Sub",(async function(e){return await a.tick(e)})).inverter().untilFail("Reassess").do("Reassess",(async e=>await o.tick(e))).do("First Sub Sub",(async function(e){return await a.tick(e)})).end().end().end().build()}}class Q{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s=()=>Hospital.agents.find((t=>t.id==e));new j(this.index,(()=>s().Computer.location)).tree,new G(e).tree,new V(e).tree,new W(e).tree,new K(e).tree,new q(e).tree,new Y(e).tree;let n=new z(e).tree;this.tree=t.sequence("Responsibility").do("getRooms",(t=>(Hospital.agents.find((t=>t.id==e)).addRoom(Hospital.locations.find((e=>"C1"==e.name))),null==s().name&&console.log("getRooms"),i.BehaviorTreeStatus.Success))).do("getComputer",(e=>{switch(s().MedicalStaffSubclass){case"Tech":s().Computer=Hospital.locations.find((e=>"TechPlace"==e.name));break;case"Nurse":s().Computer=Hospital.locations.find((e=>"NursePlace"==e.name));break;case"Resident":s().Computer=Hospital.locations.find((e=>"ResidentStart"==e.name));break;case"CT":s().Computer=Hospital.locations.find((e=>"CT 1"==e.name));break;case"Radiology":s().Computer=Hospital.locations.find((e=>"CT 2"==e.name));break;default:console.error("Bad Subclass Name")}return i.BehaviorTreeStatus.Success})).do("Sub Responsibility",(async function(e){return await n.tick(e)})).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class Z{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s="CT 1",n=Hospital.locations.find((e=>e.name==s));if(!n)throw new exception("We couldn't find a location called CT 1");this.tree=t.sequence("Tech Tree").splice(new d(this.index,n.location).tree).splice(new p(e,Hospital.locations.find((e=>"CT 1"==e.name)).location).tree).splice(new Q(e).tree).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class ${constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;let s=Hospital.locations.find((e=>"Exit"==e.name));if(!s)throw new Exception("We couldn't find a location called Exit");this.tree=t.sequence("Escape Person Behaviors").splice(new d(this.index,s.location).tree).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class J{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;let s=this,n=()=>Hospital.agents.find((t=>t.id==e));this.tree=t.sequence("Assign Patient To Triage Nurse").do("Assign Patient",(e=>{Hospital.agents.find((e=>e.id==s.index));let t=e.crowd.find((e=>e.id==s.index)),o=new Vector3(t.location.x,t.location.y,t.location.z),a=Hospital.agents.filter((e=>"Nurse"==e.medicalStaffType&&"Triage Nurse"==e.medicalStaffSubclass&&null==e.getCurrentPatient())).sort(((e,t)=>e.location.distanceTo(o)-t.location.distanceTo(o)))[0];if(!a)return i.BehaviorTreeStatus.Running;let r=n().getCurrentPatient();return a.setCurrentPatient(r),r.setInstructor(a),r.setPatientTempState(f.FOLLOWING),n().setCurrentPatient(null),i.BehaviorTreeStatus.Success})).end().build()}}class ee{}t(ee,"NONE","NONE"),t(ee,"CLAIMED","CLAIMED");class te{}t(te,"MAIN_ENTRANCE","MAIN_ENTRANCE"),t(te,"AMBULANCE_ENTRANCE","AMBULANCE_ENTRANCE"),t(te,"CHECK_IN","CHECK_IN"),t(te,"WAITING_ROOM","WAITING_ROOM"),t(te,"TRIAGE_ROOM","TRIAGE_ROOM"),t(te,"FAST_TRACK","FAST_TRACK"),t(te,"X_RAY_ROOM","X_RAY_ROOM"),t(te,"CT_ROOM","CT_ROOM"),t(te,"PHARMACY","PHARMACY"),t(te,"NURSE_STATION","NURSE_STATION"),t(te,"B_DESK","B_DESK"),t(te,"E_ROOM","E_ROOM"),t(te,"C_ROOM","C_ROOM"),t(te,"TRAUMA_BAY","TRAUMA_BAY"),t(te,"HOSPITAL_ENTRANCE","HOSPITAL_ENTRANCE");class ie{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.tree=t.sequence("Computer Assign Patient Room").do("Assign Room",(t=>{let s=Hospital.agents.find((t=>t.id==e)).getCurrentPatient(),n=Hospital.computer.getEntry(s),o=Hospital.locations.filter((e=>e.roomType==te.C_ROOM&&e.locationStatus==ee.NONE));return 0==o.length?i.BehaviorTreeStatus.Failed:(s.setAssignedRoom(o[0]),s.setPermanentRoom(o[0]),n.setBed(o[0]),i.BehaviorTreeStatus.Success)})).end().build()}}class se{constructor(e,i){t(this,"es"),t(this,"status"),t(this,"lastChange",new Date),t(this,"patient"),t(this,"bed"),t(this,"chiefComplaint"),t(this,"arr",new Date),t(this,"vitals"),t(this,"comments"),t(this,"rn"),t(this,"res"),t(this,"md"),t(this,"unack",[]),t(this,"imageStat"),t(this,"bed2"),t(this,"bedReq"),t(this,"admitMD"),t(this,"reg"),t(this,"ekg"),t(this,"answeredQuestions",!1),this.patient=e,this.chiefComplaint=i}isAnsweredQuestions(){return this.answeredQuestions}setAnsweredQuestions(e){this.answeredQuestions=e,this.change()}toString(){let e="";return e+=es+",",e+=status+", ",e+=lastChange+", ",e+=patient+", ",e+=bed+", ",e+=chiefComplaint+", ",e+=arr+", ",e+=vitals+", ",e+=comments+", ",e+=rn+", ",e+=res+", ",e+=md+", ",e+=unack+", ",e+=imageStat+", ",e+=bed2+", ",e+=bedReq+", ",e+=admitMD+", ",e+=reg+", ",e+=ekg+", ",e+=answeredQuestions+", ",e}getEs(){return this.es}setEs(e){this.es=e,this.change()}getStatus(){return this.status}setStatus(e){this.status=e,this.change()}getLastChange(){return this.lastChange}setLastChange(e){this.lastChange=e,this.change()}getPatient(){return this.patient}setPatient(e){this.patient=e,this.change()}getBed(){return this.bed}setBed(e){this.bed=e,this.change()}getChiefComplaint(){return this.chiefComplaint}setChiefComplaint(e){this.chiefComplaint=e,this.change()}getArr(){return this.arr}setArr(e){this.arr=e,this.change()}getVitals(){return this.vitals}setVitals(e){this.vitals=e,this.change()}getComments(){return this.comments}setComments(e){this.comments=e,this.change()}getRn(){return this.rn}setRn(e){this.rn=e,this.change()}getRes(){return this.res}setRes(e){this.res=e,this.change()}getMd(){return this.md}setMd(e){this.md=e,this.change()}getUnack(){return this.unack}setUnack(e){this.unack=e,this.change()}getImageStat(){return this.imageStat}setImageStat(e){this.imageStat=e,this.change()}getBed2(){return this.bed2}setBed2(e){this.bed2=e,this.change()}getBedReq(){return this.bedReq}setBedReq(e){this.bedReq=e,this.change()}getAdmitMD(){return this.admitMD}setAdmitMD(e){this.admitMD=e,this.change()}getReg(){return this.reg}setReg(e){this.reg=e,this.change()}getEkg(){return this.ekg}setEkg(e){this.ekg=e,this.change()}change(){this.lastChange=new Date}unacknowledged(e){return this.unack.includes(e)}acknowledge(e){n.pull(this.unack,e)}addUnacknowledged(e){this.unack.push(e)}}class ne{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.tree=t.sequence("Computer Enter Patient").do("Enter Patient",(t=>{let s=Hospital.agents.find((t=>t.id==e)).getCurrentPatient(),n=new se(s,"Unknown");return Hospital.computer.add(n),i.BehaviorTreeStatus.Success})).end().build()}}class oe{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.tree=t.sequence("Computer Score Patient").do("Score Patient",(t=>{let s=Hospital.agents.find((t=>t.id==e)).getCurrentPatient();return Hospital.computer.getEntry(s).es=3,i.BehaviorTreeStatus.Success})).end().build()}}class ae{constructor(e){let t=()=>Hospital.agents.find((t=>t.id==e));this.index=e;const s=new i.BehaviorTreeBuilder;let n=this;this.tree=s.sequence("Look For Arriving Patient").do("Look For Arriving Patient",(e=>{Hospital.agents.find((e=>e.id==n.index));let s=t().location,o=Hospital.agents.filter((t=>"patient"==t.name&&e.crowd.some((e=>e.id==t.id))&&t.location)).sort(((e,t)=>Vector3.fromObject(e.location).distanceTo(s)-Vector3.fromObject(t.location).distanceTo(s)))[0]||null;return null==o||Vector3.fromObject(o.location).distanceTo(s)>3?i.BehaviorTreeStatus.Running:(o.patientTempState=f.WAITING,o.instructor=t(),t().currentPatient=o,i.BehaviorTreeStatus.Success)})).end().build()}}class re{constructor(e,t){const s=new i.BehaviorTreeBuilder;this.tree=s.sequence("Take Time").do("Take Time",(e=>i.BehaviorTreeStatus.Success)).end().build()}}class ce{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;let s=Hospital.locations.find((e=>"Check In"==e.name));if(!s)throw new Exception("We couldn't find a location called Check In");this.tree=t.sequence("Greeter Nurse Behaviors").splice(new d(this.index,s.location).tree).splice(new ae(e).tree).splice(new re(30,90).tree).splice(new ne(e).tree).splice(new re(30,60).tree).splice(new oe(e).tree).splice(new re(30,60).tree).splice(new ie(e).tree).splice(new J(e).tree).splice(new u(e).tree).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class le{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s="Fast Track 1",n=Hospital.locations.find((e=>e.name==s));if(!n)throw new exception("We couldn't find a location called "+s);this.tree=t.sequence("Janitorial").splice(new d(this.index,n.location).tree).splice(new u(e).tree).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class de{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s=Hospital.locations.find((e=>"NursePlace"==e.name)),n=Hospital.locations.find((e=>"NursePlace"==e.name));this.tree=t.sequence("Assign Nurse").splice(new d(this.index,s.location).tree).splice(new p(e,n.location).tree).splice(new Q(e).tree).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}checkEndOfSimulation(){return self.Hospital.computer.entries.length>0&&self.Hospital.computer.entries[0].unacknowledged("NurseEscortPatientToExit")}}class ue{constructor(e){let t=()=>Hospital.agents.find((t=>t.id==e));this.index=e;const s=new i.BehaviorTreeBuilder;let n=this;this.tree=s.sequence("Follow Instructions").do("Follow Instructions",(e=>{let s=Hospital.agents.find((e=>e.id==n.index)),o=Hospital.agents[n.index].idx,a=e.crowd.find((e=>e.id==o)),r=new Vector3(a.location.x,a.location.y,a.location.z),c=t().getPatientTempState();if(c==f.WAITING)s.destination=new Vector3(r.x,r.y,r.z);else if(c==f.FOLLOWING){let i=t().getInstructor(),n=Vector3.fromObject(e.crowd.find((e=>e.id==i.idx)).location),o=r;if(o.distanceTo(n)<1)s.destination=new Vector3(r.x,r.y,r.z);else{let e=Vector3.subtract(n,o);e.normalize();let t=Vector3.add(n,e);s.destination=t}}else if(c==f.GO_INTO_ROOM){let e=t().getAssignedRoom().getLocation();Vector3.fromObject(e).distanceTo(t().getLocation())<.5?t().setPatientTempState(f.WAITING):t().setDestination(e)}else c==f.DONE?(console.log("Done"),t().inSimulation=!1):console.log("Invalid patient temp state "+c);return i.BehaviorTreeStatus.Running})).end().build()}}class he{constructor(e){this.index=e;let t=this;const s=new i.BehaviorTreeBuilder;this.tree=s.sequence("Stop").do("Stop",(e=>{let s=Hospital.agents.find((e=>e.id==t.index)),n=e.crowd.find((e=>e.id==t.index)),o=new Vector3(n.location.x,n.location.y,n.location.z);return s.destination=new Vector3(o.x,o.y,o.z),console.log("Stopped"),i.BehaviorTreeStatus.Success})).end().build()}}class pe{constructor(e,t){this.index=e,this.startLocation=t;const s=new i.BehaviorTreeBuilder;if(!Hospital.locations.find((e=>"Check In"==e.name)))throw new Exception("We couldn't find a location called Check In");this.tree=s.sequence("Patient Actions").splice(new j(e,(()=>this.startLocation.location)).tree).splice(new he(e).tree).splice(new ue(e).tree).do("Done following instructions",(async function(e){return console.log("Done following instructions"),i.BehaviorTreeStatus.Success})).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class ge{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s="CT 2",n=Hospital.locations.find((e=>e.name==s));if(!n)throw new exception("We couldn't find a location called CT 2");this.tree=t.sequence("Go and Idle").splice(new d(this.index,n.location).tree).splice(new Q(e).tree).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class Te{constructor(e,t){this.index=e,this.bed=t;const s=new i.BehaviorTreeBuilder;this.tree=s.sequence("Assign Bed").do("Set Bed Location",(t=>(Hospital.agents.find((t=>t.id==e)).addRoom(Vector3.fromObject(this.bed)),i.BehaviorTreeStatus.Success))).end().build()}}class me{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s="ResidentStart",n=Hospital.locations.find((e=>e.name==s));if(!n)throw new exception("We couldn't find a location called "+s);this.tree=t.sequence("Assign").splice(new d(this.index,n.location).tree).splice(new Te(e,Hospital.locations.find((e=>"C1"==e.name)).location).tree).splice(new p(e,Hospital.locations.find((e=>"ResidentStart"==e.name)).location).tree).splice(new Q(e).tree).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class Se{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s="TechPlace",n=Hospital.locations.find((e=>e.name==s));if(!n)throw new exception("We couldn't find a location called TechPlace");let o=Hospital.locations.find((e=>"TechPlace"==e.name)),a=new Te(e,Hospital.locations.find((e=>"C1"==e.name)).location).tree,r=new p(e,o.location).tree,c=new Q(e).tree;this.tree=t.sequence("Assign").splice(new d(this.index,n.location).tree).do("Assiging Bed",(async e=>await a.tick(e))).do("Assign Computer",(async e=>await r.tick(e))).do("Assign Responsibility",(async e=>await c.tick(e))).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class we{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;let s=()=>Hospital.agents.find((t=>t.id==e));this.tree=t.sequence("Leave Patient").do("Assign Room",(e=>{let t=s().getCurrentPatient();return s().setCurrentPatient(null),t.setPatientTempState(f.GO_INTO_ROOM),t.setAssignedRoom(Hospital.computer.getEntry(t).getBed()),i.BehaviorTreeStatus.Success})).end().build()}}class Re{constructor(e){this.index=e;const t=new i.BehaviorTreeBuilder;this.toReturn=null;let s=this,n="TriageNursePlace",o=()=>Hospital.agents.find((t=>t.id==e)),a=Hospital.locations.find((e=>e.name==n));if(!a)throw new exception("We couldn't find a location called "+n);let r=new we(s.index).tree;this.tree=t.sequence("Pick Triage Room").splice(new d(s.index,a.location).tree).do("Wait For Patient Assignment",(e=>o().getCurrentPatient()?i.BehaviorTreeStatus.Success:i.BehaviorTreeStatus.Running)).splice(new j(s.index,(()=>o().getCurrentPatient().getAssignedRoom().location)).tree).do("Leave Patient",(e=>r.tick(e))).end().build()}async update(e,t){await this.tree.tick({crowd:e,msec:t})}}class fe extends l{constructor(e){super(e.location,e.id,e.name,e.type,e.doctorYear),t(this,"startX"),t(this,"startY"),t(this,"startZ"),t(this,"destX"),t(this,"destY"),t(this,"destZ"),t(this,"startMSec"),t(this,"inSimulation",!1),t(this,"hasEntered",!1),t(this,"behavior"),t(this,"idx"),this.name=e.name,this.startMSec=25*e.arrivalTick,this.arrivalLocation=e.arrivalLocation,this.age=e.age,this.severity=e.severity,this.patientName=e.patientName,this.gender=e.gender,this.id=e.id,this.patientTempState=void 0;let i=Hospital.locations.find((t=>t.name==e.arrivalLocation));if(i||console.error("Bad starting location "+e.arrivalLocation),this.startX=i.location.x,this.startY=i.location.y,this.startZ=i.location.z,this.destX=0,this.destY=0,this.destZ=0,"Tech"==e.name)if("Tech"==e.type)this.behavior=new Se(e.id);else if("CT"==e.type)this.behavior=new Z(e.id);else if("Janitorial"==e.type)this.behavior=new le(e.id);else{if("Radiology"!=e.type)throw new Exception("That tech type does not exist "+e.type);this.behavior=new ge(e.id)}else if("Nurse"==e.name)if("Triage Nurse"==e.type)this.behavior=new Re(e.id);else if("Nurse"==e.type)this.behavior=new de(e.id);else{if("Greeter Nurse"!=e.type)throw new Exception("That nurse type does not exist "+e.type);this.behavior=new ce(e.id)}else if("Attending"==e.name){if("Attending"!=e.type)throw new"That attending type does not exist "+e.type;this.behavior=new h(e.id)}else if("Resident"==e.name){if("Resident"!=e.type)throw new Exception("That resident type does not exist "+e.type);this.behavior=new me(e.id)}else{if("EscapePerson"!=e.name)throw new Exception("The agent name of "+e.name+" is not a valid agent name.");this.behavior=new $(e.id)}}getStart(){return[this.startX,this.startY,this.startZ]}getEnd(){return[this.destX,this.destY,this.destZ]}setId(e){this.id=e}getId(){return this.id}getStartMSec(){return this.startMSec}isActive(){return active}setActive(e){this.active=e}getPatientTempState(){return this.patientTempState}}t(fe,"index",0);class Ee extends c{constructor(e,i,s,n){super(e,i,n),t(this,"patientPregnancyState","NOT_EXPECTING"),t(this,"patientTempState",f.WAITING),t(this,"severity"),t(this,"instructor"),t(this,"permanentRoom"),this.severity=s}setPermanentRoom(e){this.permanentRoom=e}getPermanentRoom(){return this.permanentRoom}getInstructor(){return this.instructor}setInstructor(e){this.instructor=e}getSeverity(){return this.severity}setSeverity(e){this.severity=e}getPatientTempState(){return this.patientTempState}setPatientTempState(e){this.patientTempState=e}getPatientPregnancyState(){return this.patientPregnancyState}setPatientPregnancyState(e){this.patientPregnancyState=e}}class ye extends Ee{constructor(e,i,s,n,o){super(i,s,n,o),t(this,"startX"),t(this,"startY"),t(this,"startZ"),t(this,"destX"),t(this,"destY"),t(this,"destZ"),t(this,"startMSec"),t(this,"inSimulation",!1),t(this,"hasEntered",!1),t(this,"behavior"),t(this,"idx"),this.name=e.name,this.startMSec=25*e.arrivalTick,this.arrivalLocation=e.arrivalLocation,this.age=e.age,this.severity=e.severity,this.patientName=e.patientName,this.gender=e.gender,this.id=e.id;let a=Hospital.locations.find((t=>t.name==e.arrivalLocation));a||console.error("Bad starting location "+e.arrivalLocation),this.startX=a.location.x,this.startY=a.location.y,this.startZ=a.location.z,this.destX=0,this.destY=0,this.destZ=0,this.behavior=new pe(e.id,Hospital.locations.find((e=>"Check In"==e.name)))}getStart(){return[this.startX,this.startY,this.startZ]}getEnd(){return[this.destX,this.destY,this.destZ]}setId(e){this.id=e}getId(){return this.id}getStartMSec(){return this.startMSec}isActive(){return active}setActive(e){this.active=e}}function Ce(e){let t=new o(200,0,200);return t="patient"==e.name?new o(0,.75,0):"Nurse"==e.name?new o(.75,.75,.75):"Attending"==e.name?new o(.75,0,0):"Resident"==e.name?new o(.75,.75,0):"Tech"==e.name?new o(0,0,.75):new o(0,0,0),t}t(ye,"index",0);var ve=[{title:"Hospital Test",objPath:"hospital.obj",arrivalPath:"arrivalHospital.json",secondsOfSimulation:4500,locationsPath:"locationsHospital.json"},{title:"Flat Test",objPath:"flat.obj",arrivalPath:"arrivalsFlat.json",secondsOfSimulation:2500,locationsPath:"locationsFlat.json"}];const Ne=class{static getFPS(){return 60}static getCTQueue(){return Ne.CTQueue}static setCTQueue(e){Ne.CTQueue=e}static isCTOccupied(){return Ne.CTOccupied}static setCTOccupied(e){Ne.CTOccupied=e}static getLocationByName(e){return this.locations.find((t=>t.getName()==e))}};let be=Ne;t(be,"agentConstants"),t(be,"locations"),t(be,"computer"),t(be,"comments",[]),t(be,"CTQueue",[]),t(be,"activePeople",[]),t(be,"CTOccupied",!1);class Ae{constructor(){t(this,"entries",[])}add(e){this.entries.push(e)}print(){this.entries.forEach((e=>console.log(e)))}getEntry(e){return e?this.entries.find((t=>t.patient.id==e.id)):null}}class Pe{constructor(e,t,i){this.name=i,this.location=e,this.roomType=t,this.locationStatus=ee.NONE,this.locationStatusOwner=null}getName(){return this.name}setName(e){this.name=e}getLocation(){return this.location}setLocation(e){this.location=e}getRoomType(){return this.roomType}setRoomType(e){this.roomType=e}getLocationStatus(){return this.locationStatus}setLocationStatus(e){this.locationStatus=e}getLocationStatusOwner(){return this.locationStatusOwner}setLocationStatusOwner(e){this.locationStatusOwner=e}}window.hideTable=function(){var e=document.getElementById("ComputerEntryTable");"none"===e.style.display?e.style.display="block":e.style.display="none"},function(){let e={secondsOfSimulation:86400,millisecondsBetweenFrames:1e3};window.Hospital=be,window.Vector3=s;let t=r.objs.hospital,i=r.locations.locationsHospital,n=r.arrivals.arrivalHospital,o=[],c=[];i.forEach((e=>{c.push(new Pe(e.position,e.annotationName.toUpperCase().replace(" ","_"),e.name))})),Hospital.agents=o,Hospital.locations=c,Hospital.computer=new Ae,n.forEach(((e,t)=>{"patient"==e.name?o.push(new ye(e,i)):o.push(new fe(e,i)),o[o.length-1].setId(t)})),function(e){var t=document.getElementById("ComputerEntryTable"),i=t.insertRow(0),s=i.insertCell(0),n=i.insertCell(1),o=i.insertCell(2);s.innerHTML="Computer Entry",n.innerHTML="Chief Complaint",o.innerHTML="Vitals Taken";let a=0;!function e(){for(let r=0;r<Hospital.computer.entries.length;r++){if(Hospital.computer.entries.length>a){var i=t.insertRow(a+1),s=i.insertCell(0),n=i.insertCell(1),o=i.insertCell(2);s.innerHTML=a+1,n.innerHTML=Hospital.computer.entries[a].getChiefComplaint(),o.innerHTML=Hospital.computer.entries[a].getVitals(),a++}document.getElementById("ComputerEntryTable").rows[r+1].cells[1].innerHTML=Hospital.computer.entries[r].getChiefComplaint(),document.getElementById("ComputerEntryTable").rows[r+1].cells[2].innerHTML=Hospital.computer.entries[r].getVitals()}requestAnimationFrame(e)}();var r=new Stats,c=r.addPanel(new Stats.Panel("AGENTS","#ff8","#221"));r.showPanel(2),r.dom.style.position="fixed",r.dom.style.float="left",document.body.appendChild(r.dom);let l=0;!function t(){if(void 0===e.agentPositions[l]);else{let t=0;for(let i=0;i<e.agentPositions[l].length;i++)e.agentPositions[l][i].inSimulation&&t++;c.update(t),l++}r.update(),requestAnimationFrame(t)}()}(new a(t,o,e.secondsOfSimulation,e.millisecondsBetweenFrames,i,window,document.body,Ce,ve,"./crowd-setup/"))}();
